//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include <FireDAC.Comp.Client.hpp>
#include <FireDAC.Phys.MySQL.hpp>

#include <FireDAC.Phys.MySQL.hpp>
#include <FireDAC.Phys.MySQLDef.hpp>

#include "algorithm"

#include "glTrack.h"
#include "AddGlass.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

TMenuForm* MenuForm;
TFDMemTable* FDPhysMySQLDriverLink1;

//---------------------------------------------------------------------------
__fastcall TMenuForm::TMenuForm(TComponent* Owner) : TForm(Owner) {}
//---------------------------------------------------------------------------
void __fastcall TMenuForm::FormCreate(TObject* Sender)
{
    try {
        //        FDPhysMySQLDriverLink1->VendorLib = "C:\\Program Files\\MariaDB 11.4\\lib\\libmariadb.dll";
        //
        //        FDConnection1->Params->Clear();
        //        FDConnection1->Params->Add("DriverID=MySQL");
        //        FDConnection1->Params->Add("Server=127.0.0.1");
        //        FDConnection1->Params->Add("Database=glasstrack_db");
        //        FDConnection1->Params->Add("User_Name=root");
        //        FDConnection1->Params->Add("Password=root");
        //        FDConnection1->LoginPrompt = false;

	   // DBGrid1->Columns->Items[9]->ReadOnly = true;
        FDConnection1->LoginPrompt = false;
        FDConnection1->Connected = true; // Conectare la baza de date
        FormShow(this);
		FormResize(this);

    } catch (Exception &e) {
        ShowMessage("Eroare la conectare: " + e.Message);
    }
}
//---------------------------------------------------------------------------

__fastcall TMenuForm::~TMenuForm()
{
    delete FDPhysMySQLDriverLink1;
}

void __fastcall TMenuForm::FormResize(TObject* Sender)
{
    DBGrid1->AlignWithMargins = true; // Activăm alinierea cu margini

    int gridWidth = DBGrid1->ClientWidth; // Lățimea disponibilă
    int colCount = DBGrid1->Columns->Count; // Numărul total de coloane

    if (colCount == 0)
        return;

    int totalMargin = DBGrid1->Margins->Left +
                      DBGrid1->Margins->Right; // Calculăm marginea totală
    int effectiveWidth = gridWidth - totalMargin; // Lățimea reală utilizabilă

    int baseColWidth = effectiveWidth / colCount;
    int remainingWidth = effectiveWidth % colCount;

    for (int i = 0; i < colCount; i++) {
        DBGrid1->Columns->Items[i]->Width = baseColWidth;
    }

    for (int i = 0; i < remainingWidth; i++) {
        DBGrid1->Columns->Items[i]->Width += 1; // Distribuim pixelii rămași
    }
}

/*
    void __fastcall TMenuForm::btnVanzareClick(TObject *Sender)
    {
        if (FDQuery1->RecordCount == 0) {
            ShowMessage("Nu există produse în listă.");
            return;
        }

        int pa_id = FDQuery1->FieldByName("pa_id")->AsInteger;
        int p_count = FDQuery1->FieldByName("p_count")->AsInteger;

        if (p_count <= 0) {
            ShowMessage("Stoc epuizat!");
            return;
        }

        try {
            FDQuery1->SQL->Text = "UPDATE parbrize SET p_count = p_count - 1 WHERE p_id = "
                                  "(SELECT p_id FROM parbrize_auto WHERE pa_id = :pa_id)";
            FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
            FDQuery1->ExecSQL();

            FDConnection1->CommitRetaining();  // Confirmă tranzacția fără a o închide
            FDQuery1->Close();
            FDQuery1->Open();  // Reîncarcă datele actualizate

            ShowMessage("Produs vândut cu succes!");
        } catch (Exception &e) {
            ShowMessage("Eroare la vânzare: " + e.Message);
            FDQuery1->CancelUpdates();
		}
	}
*/

//---------------------------------------------------------------------------

void __fastcall TMenuForm::AddButtonClick(TObject* Sender)
{
    AddFormG = new TAddFormG(this);
    AddFormG->ShowModal();
    delete AddFormG;
}

//---------------------------------------------------------------------------

void __fastcall TMenuForm::FormShow(TObject* Sender)
{
    try {
        FDQuery1->Close(); // Închide query-ul dacă era deja deschis
        FDQuery1->SQL->Text =
            "SELECT pp.pa_id, a.a_marca, a.a_model, p.p_code, p.p_origine, s.nume_sectie, c.nume_celula, p.p_count, p.p_price "
            "FROM parbrize_auto pp "
            "JOIN automobile a ON a.a_id = pp.a_id "
            "JOIN sectia s ON pp.sectia_id = s.id_sectia "
            "JOIN celula c ON s.id_celula = c.id_celula "
            "JOIN parbrize p ON p.p_id = pp.p_id ";

        FDQuery1->Open();
        FormResize(MenuForm);
    } catch (Exception &e) {
        ShowMessage("Eroare la încărcarea datelor: " + e.Message);
    }
}

//---------------------------------------------------------------------------

void __fastcall TMenuForm::Button1Click(TObject* Sender)
{
    FormShow(this);
    FormResize(this);
}

//---------------------------------------------------------------------------
void __fastcall TMenuForm::SearchBoxChange(TObject* Sender)
{
    String searchText = SearchBox->Text.Trim();

    try {
        FDQuery1->Close();
        FDQuery1->SQL->Text =
            "SELECT pp.pa_id, a.a_marca, a.a_model, p.p_code, p.p_origine, s.nume_sectie, c.nume_celula, p.p_count, p.p_price "
            "FROM parbrize_auto pp "
            "JOIN automobile a ON a.a_id = pp.a_id "
            "JOIN sectia s ON pp.sectia_id = s.id_sectia "
            "JOIN celula c ON s.id_celula = c.id_celula "
            "JOIN parbrize p ON p.p_id = pp.p_id "
            "WHERE a.a_marca LIKE :searchText OR a.a_model LIKE :searchText "
            "OR p.p_code LIKE :searchText OR s.nume_sectie LIKE :searchText "
            "OR c.nume_celula LIKE :searchText OR p.p_origine LIKE :searchText";

        FDQuery1->ParamByName("searchText")->AsString = "%" + searchText + "%";

        FDQuery1->Open();
        FormResize(this);
    } catch (Exception &e) {
        ShowMessage("Eroare la actualizarea datelor: " + e.Message);
    }
}

//---------------------------------------------------------------------------

void __fastcall TMenuForm::FDQuery1AfterPost(TDataSet* DataSet)
{
    try {
        // daca pa_id exista și nu este NULL
        if (!DataSet->FieldByName("pa_id")->IsNull) {
            int pa_id = DataSet->FieldByName("pa_id")->AsInteger;

            // salvam valorile campurilor înainte de a modifica interogarea
            String a_marca = DataSet->FieldByName("a_marca")->AsString;
            String a_model = DataSet->FieldByName("a_model")->AsString;
            String p_origine = DataSet->FieldByName("p_origine")->AsString;
            String nume_sectie = DataSet->FieldByName("nume_sectie")->AsString;
            String nume_celula = DataSet->FieldByName("nume_celula")->AsString;
            String p_code = DataSet->FieldByName("p_code")->AsString;
            float p_price = DataSet->FieldByName("p_price")->AsFloat;
            int p_count = DataSet->FieldByName("p_count")->AsInteger;

            // Actualizare în tabela `parbrize`
            FDQuery1->SQL->Text =
                "UPDATE parbrize SET p_price = :price, p_origine = :origine, p_code = :code, p_count = :count "
                "WHERE p_id = (SELECT p_id FROM parbrize_auto WHERE pa_id = :pa_id)";
            FDQuery1->ParamByName("price")->AsFloat = p_price;
            FDQuery1->ParamByName("origine")->AsString = p_origine;
            FDQuery1->ParamByName("code")->AsString = p_code;
            FDQuery1->ParamByName("count")->AsInteger = p_count;
            FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
            FDQuery1->ExecSQL();

            // Actualizare în tabela `automobile`
            FDQuery1->SQL->Text =
                "UPDATE automobile SET a_marca = :a_marca, a_model = :a_model "
                "WHERE a_id = (SELECT a_id FROM parbrize_auto WHERE pa_id = :pa_id)";
            FDQuery1->ParamByName("a_marca")->AsString = a_marca;
            FDQuery1->ParamByName("a_model")->AsString = a_model;
            FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
            FDQuery1->ExecSQL();

            //			// Actualizare în tabela `sectie`
            //			FDQuery1->SQL->Text = "UPDATE sectia SET nume_sectie = :nume_sectie "
            //								  "WHERE id_sectia = (SELECT sectia_id FROM parbrize_auto WHERE pa_id = :pa_id)";
            //			FDQuery1->ParamByName("nume_sectie")->AsString = nume_sectie;
            //			FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
            //			FDQuery1->ExecSQL();
            //
            //			// Actualizare în tabela `celule`
            //			FDQuery1->SQL->Text = "UPDATE celula SET id_celula = :nume_celula "
            //								  "WHERE id_celula = (SELECT c.id_celula FROM parbrize_auto pa "
            //								  "JOIN sectia s ON pa.sectia_id = s.id_sectia "
            //								  "JOIN celula c ON c.id_celula = s.id_celula WHERE pa_id = :pa_id)";
            //			FDQuery1->ParamByName("nume_celula")->AsString = nume_celula;
            //			FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
            //			FDQuery1->ExecSQL();

            // Confirmă tranzacțiile
            FDConnection1->CommitRetaining();
            FormShow(MenuForm);
        } else {
            ShowMessage("Eroare: câmpul pa_id este NULL!");
        }

    } catch (Exception &e) {
        ShowMessage("Eroare la salvare: " + e.Message);
        FDQuery1->CancelUpdates();
    }
}

//---------------------------------------------------------------------------

void __fastcall TMenuForm::DBGrid1CellClick(TColumn* Column)
{
    if (Column->FieldName == "FakeField_Vanzare") // Dacă e butonul „Vânzare”
    {
        int pa_id = FDQuery1->FieldByName("pa_id")->AsInteger;
        int cantitate = FDQuery1->FieldByName("p_count")->AsInteger;

        if (cantitate > 0) {
            FDQuery1->Edit();
            FDQuery1->FieldByName("p_count")->AsInteger = cantitate - 1;
            FDQuery1->Post();
            FDConnection1->CommitRetaining();
            ShowMessage("Produs vândut! Cantitatea actualizată.");
        } else {
            ShowMessage("Stoc epuizat!");
        }
    }
}

//---------------------------------------------------------------------------

void __fastcall TMenuForm::DBGrid1MouseDown(
    TObject* Sender, TMouseButton Button, TShiftState Shift, int X, int Y)
{
    TColumn* Column = DBGrid1->Columns->Items[DBGrid1->MouseCoord(X, Y).X];

    if (Column && Column->Title->Caption == "Vânzare") {
        int pa_id = FDQuery1->FieldByName("pa_id")->AsInteger;

        if (pa_id > 0) {
            FDQuery1->SQL->Text =
                "UPDATE parbrize SET p_count = p_count - 1 "
                "WHERE p_id = (SELECT p_id FROM parbrize_auto WHERE pa_id = :pa_id) "
                "AND p_count > 0";
            FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
            FDQuery1->ExecSQL();

            FDConnection1->CommitRetaining();
            FDQuery1->Refresh(); // Actualizare date

            ShowMessage("Produs vândut!");
        }
    }
}

//---------------------------------------------------------------------------

void __fastcall TMenuForm::FDQuery1CalcFields(TDataSet* DataSet)
{
    DataSet->FieldByName("FakeField_Vanzare")->AsString = "Vânzare";
}
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

void __fastcall TMenuForm::DBGrid1KeyDown(
    TObject* Sender, WORD &Key, TShiftState Shift)

{
    if (Key == VK_DELETE) // daca s-a apasat tasta Delete
    {
        if (FDQuery1->RecordCount == 0)
            return; //

        if (Application->MessageBox(L"Sigur doriți să ștergeți acest rând?",
                L"Confirmare", MB_YESNO | MB_ICONQUESTION) == IDYES)
        {
            try {
                int pa_id = FDQuery1->FieldByName("pa_id")
                                ->AsInteger; // id-ul randului selectat

                FDQuery1->Close();
                FDQuery1->SQL->Text =
                    "DELETE FROM parbrize_auto WHERE pa_id = :pa_id";
                FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
                FDQuery1->ExecSQL();

                FDQuery1->Close();

                ShowMessage(L"Rândul a fost șters cu succes.");
                FormShow(this);
            } catch (Exception &e) {
                ShowMessage(L"Eroare la ștergere: " + e.Message);
            }
        }
    }
}
//---------------------------------------------------------------------------

void __fastcall TMenuForm::MenuItemVindeClick(TObject* Sender)
{
    int pa_id = FDQuery1->FieldByName("pa_id")->AsInteger;
    if (FDQuery1->Active) {
        FDQuery1->Close(); // Închide dataset-ul înainte de ExecSQL
    }
    FDQuery1->SQL->Text =
        "UPDATE parbrize SET p_count = p_count - 1 "
        "WHERE p_id = (SELECT p_id FROM parbrize_auto WHERE pa_id = :pa_id) "
        "AND p_count > 0";
    FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
	FDQuery1->ExecSQL();
	FormShow(this);
    ShowMessage(L"Produs Vândut!");

    //
    //	if (pa_id > 0)
    //	{
    //		FDQuery1->Open();
    //		FDQuery1->SQL->Text = "UPDATE parbrize SET p_count = p_count - 1 "
    //                              "WHERE p_id = (SELECT p_id FROM parbrize_auto WHERE pa_id = :pa_id) "
    //                              "AND p_count > 0";
    //		FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
    //		FDQuery1->ExecSQL();
    //
    //        FDConnection1->CommitRetaining();
    //        FDQuery1->Refresh(); // Actualizare date
    //
    //		ShowMessage("Produs vândut!");
    //	}
}

//---------------------------------------------------------------------------

//----------------------------------------------------------------------------

