//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "glTrack.h"
#include "EditForm.h"
#include "glTrack.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TEditFormProduct* EditFormProduct;
//---------------------------------------------------------------------------
// Constructorul care initializeaza datele din edituri pe baza id-ului, randului selectat
__fastcall TEditFormProduct::TEditFormProduct(
    TComponent* Owner, TFDQuery* query, int pa_id) :
	TForm(Owner), FDQuery1(query), ProductId(pa_id)
{
	FDQuery1->Close();
	FDQuery1->SQL->Text =
    "SELECT pp.pa_id, a.a_marca, a.a_model, p.p_name, ct.cod, p.p_origine, "
    "c.nume_celula, p.p_count, p.p_price "
    "FROM product_auto_table pp "
    "JOIN vehicle_table a ON a.a_id = pp.a_id "
    "JOIN celula_table c ON c.id_celula = pp.celula_id "
    "JOIN code_table ct ON ct.id_cod = pp.id_cod "
    "JOIN product_table p ON p.p_id = pp.p_id "
    "WHERE pp.pa_id = :pa_id";

	FDQuery1->ParamByName("pa_id")->AsInteger = pa_id;
	FDQuery1->Open();

	if (!FDQuery1->IsEmpty()) {
		AutoEdit->Text = FDQuery1->FieldByName("a_marca")->AsString;
		ModelName->Text = FDQuery1->FieldByName("a_model")->AsString;
		ProductEdit->Text = FDQuery1->FieldByName("p_name")->AsString;
		CodEdit->Text = FDQuery1->FieldByName("cod")->AsString;
		OrigineEdit->Text = FDQuery1->FieldByName("p_origine")->AsString;
		CelulaEdit->Text = FDQuery1->FieldByName("nume_celula")->AsString;
		CountEdit->Text = FDQuery1->FieldByName("p_count")->AsString;
		PriceEdit->Text = FDQuery1->FieldByName("p_price")->AsString;
    }
}
//---------------------------------------------------------------------------

void __fastcall TEditFormProduct::CancelButtonClick(TObject* Sender)
{
	this->Close();
}
//---------------------------------------------------------------------------

// Functia butonului de confirmare pentru a adauga datele in db

void __fastcall TEditFormProduct::ConfirmButtonClick(TObject* Sender)
{
	// interogarea sql pentru a actualiza datele automobilului
    String sqlQueryVehicle = "UPDATE vehicle_table SET a_marca = :a_marca, a_model = :a_model "
                             "WHERE a_id = (SELECT a_id FROM product_auto_table WHERE pa_id = :pa_id)";

	// interogarea sql pentru a actualiza datele produsului
    String sqlQueryProduct = "UPDATE product_table SET p_name = :p_name, p_price = :price, p_origine = :origine, p_count = :p_count "
                             "WHERE p_id = (SELECT p_id FROM product_auto_table WHERE pa_id = :pa_id)";

    try {
        // Update pentru prima tabela vehicle_table
        FDQuery1->SQL->Text = sqlQueryVehicle;

		// parametrii pentru interogarea vehicle_table
        FDQuery1->ParamByName("a_marca")->AsString = AutoEdit->Text;
        FDQuery1->ParamByName("a_model")->AsString = ModelName->Text;
        FDQuery1->ParamByName("pa_id")->AsInteger = ProductId; // ID-ul trimis la editare
		FDQuery1->ExecSQL();

        // Update pentru a doua tabela
        FDQuery1->SQL->Text = sqlQueryProduct;

        // parametrii pentru interogarea product_table
        FDQuery1->ParamByName("p_name")->AsString = ProductEdit->Text;
        FDQuery1->ParamByName("price")->AsFloat = StrToFloatDef(PriceEdit->Text, 0);
        FDQuery1->ParamByName("origine")->AsString = OrigineEdit->Text;
        FDQuery1->ParamByName("p_count")->AsInteger = StrToIntDef(CountEdit->Text, 0);
		FDQuery1->ParamByName("pa_id")->AsInteger = ProductId;

        // Execută a doua interogare
        FDQuery1->ExecSQL();

        ShowMessage("Modificările au fost salvate!");
        ModalResult = mrOk; // Închide fereastra de editare

    } catch (Exception &e) {
        ShowMessage("Eroare la actualizare: " + e.Message);
    }
}
//---------------------------------------------------------------------------


